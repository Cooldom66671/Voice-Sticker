#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ fofr/sticker-maker
–û–±–Ω–æ–≤–ª—è–µ—Ç –ë–î –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
"""
import sqlite3
from pathlib import Path
import json
from datetime import datetime

# –ü—É—Ç—å –∫ –ë–î
DB_PATH = Path("bot_database.db")


def migrate_to_sticker_maker():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –ë–î"""
    print("üîÑ –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ sticker-maker...")

    if not DB_PATH.exists():
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    try:
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è background –Ω–∞ 'auto'
        print("\n1Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è—é –ø–æ–ª–µ background...")
        cursor.execute("""
            UPDATE stickers 
            SET background = 'auto' 
            WHERE background IN ('transparent', 'white', 'gradient', 'pattern')
        """)
        updated = cursor.rowcount
        print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated}")

        # 2. –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—é –∏–Ω–¥–µ–∫—Å—ã...")
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_stickers_model 
            ON stickers(metadata)
        """)
        print("   ‚úÖ –ò–Ω–¥–µ–∫—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

        # 3. –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
        print("\n3Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ...")
        cursor.execute("SELECT id, metadata FROM stickers WHERE metadata IS NOT NULL")
        stickers = cursor.fetchall()

        updated_meta = 0
        for sticker_id, metadata_str in stickers:
            try:
                metadata = json.loads(metadata_str) if metadata_str else {}
                if 'model' not in metadata:
                    metadata['model'] = 'sdxl'  # –°—Ç–∞—Ä—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –±—ã–ª–∏ –Ω–∞ SDXL
                    cursor.execute(
                        "UPDATE stickers SET metadata = ? WHERE id = ?",
                        (json.dumps(metadata), sticker_id)
                    )
                    updated_meta += 1
            except:
                pass

        print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {updated_meta}")

        # 4. –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –º–æ–¥–µ–ª—è–º
        print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞—é –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
        cursor.execute("DROP VIEW IF EXISTS model_statistics")
        cursor.execute("""
            CREATE VIEW model_statistics AS
            SELECT 
                COALESCE(
                    json_extract(metadata, '$.model'), 
                    'sdxl'
                ) as model,
                COUNT(*) as total_stickers,
                AVG(rating) as avg_rating,
                AVG(json_extract(metadata, '$.generation_time')) as avg_generation_time
            FROM stickers
            WHERE is_deleted = FALSE
            GROUP BY model
        """)
        print("   ‚úÖ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã")

        # 5. –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–¥–µ–ª–∏ –≤ user_preferences
        print("\n5Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        cursor.execute("PRAGMA table_info(user_preferences)")
        columns = [col[1] for col in cursor.fetchall()]

        if 'preferred_model' not in columns:
            cursor.execute("""
                ALTER TABLE user_preferences 
                ADD COLUMN preferred_model TEXT DEFAULT 'sticker-maker'
            """)
            print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ preferred_model")

        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
        cursor.execute("SELECT COUNT(*) FROM stickers WHERE is_deleted = FALSE")
        total_stickers = cursor.fetchone()[0]
        print(f"   –í—Å–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–æ–≤: {total_stickers}")

        cursor.execute("SELECT COUNT(DISTINCT user_id) FROM stickers")
        total_users = cursor.fetchone()[0]
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")

        cursor.execute("SELECT * FROM model_statistics")
        print("\n   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º:")
        for row in cursor.fetchall():
            model, count, rating, gen_time = row
            print(f"   - {model}: {count} —Å—Ç–∏–∫–µ—Ä–æ–≤, —Ä–µ–π—Ç–∏–Ω–≥ {rating or 0:.2f}, –≤—Ä–µ–º—è {gen_time or 0:.1f}—Å")

        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        print("2. –ù–æ–≤—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ fofr/sticker-maker")
        print("3. –°—Ç–∞—Ä—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        conn.rollback()

    finally:
        conn.close()


def create_backup():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î"""
    if DB_PATH.exists():
        backup_name = f"bot_database_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
        backup_path = DB_PATH.parent / backup_name

        import shutil
        shutil.copy2(DB_PATH, backup_path)
        print(f"üì¶ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        return True
    return False


if __name__ == "__main__":
    print("üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ fofr/sticker-maker")
    print("=" * 50)

    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    if create_backup():
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        migrate_to_sticker_maker()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é!")