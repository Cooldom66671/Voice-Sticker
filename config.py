"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Telegram –±–æ—Ç–∞ VoiceSticker
"""
import os
from pathlib import Path
from typing import Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ë–∞–∑–æ–≤—ã–µ –ø—É—Ç–∏
BASE_DIR = Path(__file__).parent
STORAGE_DIR = BASE_DIR / "storage"
LOGS_DIR = BASE_DIR / "logs"
MODELS_DIR = BASE_DIR / "models"
CACHE_DIR = BASE_DIR / ".cache"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
for directory in [STORAGE_DIR, LOGS_DIR, MODELS_DIR, CACHE_DIR]:
    directory.mkdir(exist_ok=True)

# MVP —Ä–µ–∂–∏–º (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ ML –º–æ–¥–µ–ª–µ–π) - –í–ê–ñ–ù–û: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
MVP_MODE = os.getenv("MVP_MODE", "true").lower() == "true"

# Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")
if not REPLICATE_API_TOKEN and not MVP_MODE:
    raise ValueError("REPLICATE_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å AI!")

# OpenAI API –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û!

# Google Gemini API –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DATABASE_PATH = BASE_DIR / "bot_database.db"
DATABASE_URL = f"sqlite+aiosqlite:///{DATABASE_PATH}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ STT (Speech-to-Text)
WHISPER_MODEL = os.getenv("WHISPER_MODEL", "base")
WHISPER_DEVICE = os.getenv("WHISPER_DEVICE", "cpu")
MAX_AUDIO_DURATION = 60  # —Å–µ–∫—É–Ω–¥
MAX_AUDIO_SIZE = 20 * 1024 * 1024  # 20 MB

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_MODEL = os.getenv("IMAGE_MODEL", "stabilityai/stable-diffusion-2-1-base")
SD_DEVICE = os.getenv("SD_DEVICE", "cpu")  # cpu, cuda, mps (–¥–ª—è Mac M1/M2)
IMAGE_SIZE = (512, 512)
MAX_QUEUE_SIZE = 10
GENERATION_TIMEOUT = 120  # —Å–µ–∫—É–Ω–¥

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
STICKER_MAX_SIZE = 512  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç–æ—Ä–æ–Ω—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö
STICKER_FILE_SIZE_LIMIT = 512 * 1024  # 512 KB –¥–ª—è Telegram

# Rate limiting
RATE_LIMIT_MESSAGES_PER_MINUTE = 20
RATE_LIMIT_MESSAGES_PER_HOUR = 100

# –°—Ç–∏–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
AVAILABLE_STYLES = {
    "default": "cute sticker art style, kawaii",
    "cartoon": "cartoon style, animated, colorful",
    "anime": "anime style, chibi, manga",
    "minimal": "minimalist, simple, clean lines",
    "pixel": "pixel art, 8-bit style, retro",
    "3d": "3D render, volumetric, modern",
    "watercolor": "watercolor painting style, artistic",
    "custom": ""  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ç–∏–ª—å
}

# –§–æ–Ω—ã –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤
BACKGROUND_STYLES = {
    "transparent": "–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π",
    "white": "–ë–µ–ª—ã–π",
    "gradient": "–ì—Ä–∞–¥–∏–µ–Ω—Ç",
    "circle": "–ö—Ä—É–≥–ª—ã–π",
    "rounded": "–ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã"
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
LOG_FORMAT = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
LOG_FILE = LOGS_DIR / "bot.log"

# Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è production)
WEBHOOK_ENABLED = os.getenv("WEBHOOK_ENABLED", "false").lower() == "true"
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
WEBHOOK_PORT = int(os.getenv("WEBHOOK_PORT", "8443"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤
BOT_USERNAME = os.getenv("BOT_USERNAME", "Voice_Stiker_Bot")  # –ò–º—è –±–æ—Ç–∞ (–±–µ–∑ @) - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ
MAX_PACKS_PER_USER = int(os.getenv("MAX_PACKS_PER_USER", "10"))  # –ú–∞–∫—Å. –∫–æ–ª-–≤–æ –ø–∞–∫–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
MAX_STICKERS_PER_PACK = int(os.getenv("MAX_STICKERS_PER_PACK", "120"))  # –ú–∞–∫—Å. –∫–æ–ª-–≤–æ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –ø–∞–∫–µ
DEFAULT_STICKER_EMOJI = os.getenv("DEFAULT_STICKER_EMOJI", "üé®")  # –≠–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
DEBUG = os.getenv("DEBUG", "false").lower() == "true"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞
CACHE_TTL = 3600  # 1 —á–∞—Å
CACHE_MAX_SIZE = 100  # –º–∞–∫—Å–∏–º—É–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫—ç—à–µ

# –ê–¥–º–∏–Ω—ã –±–æ—Ç–∞ (Telegram user IDs)
ADMIN_IDS = [int(id) for id in os.getenv("ADMIN_IDS", "").split(",") if id]

# –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
MESSAGES = {
    "start": """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç VoiceSticker!

üé® –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –∏–∑:
- üé§ –ì–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
- üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç, –∏ —è —Å–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è —Å—Ç–∏–∫–µ—Ä!

–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.""",

    "help": """üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:

1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å —Å—Ç–∏–∫–µ—Ä–∞
3Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Ñ–æ–Ω
4Ô∏è‚É£ –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä!

üìä –ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/mystickers - –ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã
/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞""",

    "processing": "üé® –°–æ–∑–¥–∞—é —Å—Ç–∏–∫–µ—Ä... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
    "error": "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    "rate_limit": "‚è± –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.",
    "choose_style": "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞:",
    "choose_background": "üñº –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ–Ω –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞:",
    "sticker_ready": "‚úÖ –í–∞—à —Å—Ç–∏–∫–µ—Ä –≥–æ—Ç–æ–≤!",
    "no_stickers": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤.",
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def validate_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    errors = []

    if not BOT_TOKEN:
        errors.append("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    if WEBHOOK_ENABLED and not WEBHOOK_HOST:
        errors.append("WEBHOOK_HOST —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏ WEBHOOK_ENABLED=true")

    if errors:
        raise ValueError(f"–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {', '.join(errors)}")

# –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if not DEBUG:
    validate_config()