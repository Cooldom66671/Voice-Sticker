#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —É–º–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ–Ω–æ–≤
"""
import asyncio
import aiosqlite
from pathlib import Path
from datetime import datetime


async def migrate_smart_backgrounds():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è —É–º–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ–Ω–æ–≤"""
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –∏–º–µ–Ω –ë–î
    db_paths = [
        Path("bot_database.db"),
        Path("voicesticker.db"),
        Path("database.db")
    ]

    db_path = None
    for path in db_paths:
        if path.exists():
            db_path = path
            break

    if not db_path:
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    print(f"üîÑ –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("\nüéØ –¶–µ–ª—å: –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —É–º–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ–Ω–æ–≤\n")

    async with aiosqlite.connect(db_path) as db:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
        print("üîß –û–±–Ω–æ–≤–ª—è—é —Ç–∏–ø—ã —Ñ–æ–Ω–æ–≤...")

        # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–∫ auto_generated
        await db.execute("""
            UPDATE stickers 
            SET background = 'auto_generated' 
            WHERE background IS NOT NULL
        """)

        print("  ‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∏–∫–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        print("\nüìä –°–æ–∑–¥–∞—é –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        await db.execute("DROP VIEW IF EXISTS generation_type_stats")
        await db.execute("DROP VIEW IF EXISTS style_background_correlation")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await db.execute("""
            CREATE VIEW generation_type_stats AS
            SELECT 
                CASE 
                    WHEN background IN ('minimal', 'transparent', 'white') THEN 'without_background'
                    WHEN background IN ('contextual', 'gradient', 'complex') THEN 'with_background'
                    ELSE 'auto_generated'
                END as generation_type,
                COUNT(*) as total_count,
                AVG(rating) as avg_rating,
                COUNT(CASE WHEN rating >= 4 THEN 1 END) * 100.0 / COUNT(rating) as success_rate
            FROM stickers
            WHERE is_deleted = 0
            GROUP BY generation_type
        """)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ generation_type_stats")

        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å—Ç–∏–ª—è –∏ —Ç–∏–ø–∞ —Ñ–æ–Ω–∞
        await db.execute("""
            CREATE VIEW style_background_correlation AS
            SELECT 
                style,
                background,
                COUNT(*) as count,
                AVG(rating) as avg_rating,
                COUNT(CASE WHEN rating >= 4 THEN 1 END) as good_count
            FROM stickers
            WHERE is_deleted = 0 AND rating IS NOT NULL
            GROUP BY style, background
            ORDER BY style, count DESC
        """)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ style_background_correlation")

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –ª–æ–∫–∞—Ü–∏—è–º–∏
        await db.execute("""
            CREATE VIEW location_prompt_analysis AS
            SELECT 
                COUNT(*) as total,
                COUNT(CASE 
                    WHEN prompt LIKE '%–∫–æ—Å–º–æ—Å%' OR prompt LIKE '%space%' 
                    OR prompt LIKE '%–ª–µ—Å%' OR prompt LIKE '%forest%'
                    OR prompt LIKE '%–º–æ—Ä–µ%' OR prompt LIKE '%sea%'
                    OR prompt LIKE '%–≥–æ—Ä–æ–¥%' OR prompt LIKE '%city%'
                    OR prompt LIKE '%–æ—Ñ–∏—Å%' OR prompt LIKE '%office%'
                    OR prompt LIKE '%–ø–∞—Ä–∫%' OR prompt LIKE '%park%'
                    THEN 1 
                END) as with_location,
                AVG(CASE 
                    WHEN prompt LIKE '%–∫–æ—Å–º–æ—Å%' OR prompt LIKE '%space%' 
                    OR prompt LIKE '%–ª–µ—Å%' OR prompt LIKE '%forest%'
                    OR prompt LIKE '%–º–æ—Ä–µ%' OR prompt LIKE '%sea%'
                    OR prompt LIKE '%–≥–æ—Ä–æ–¥%' OR prompt LIKE '%city%'
                    OR prompt LIKE '%–æ—Ñ–∏—Å%' OR prompt LIKE '%office%'
                    OR prompt LIKE '%–ø–∞—Ä–∫%' OR prompt LIKE '%park%'
                    THEN rating 
                END) as location_avg_rating
            FROM stickers
            WHERE is_deleted = 0
        """)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ location_prompt_analysis")

        await db.commit()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:")

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–æ–≤
        cursor = await db.execute("""
            SELECT 
                COUNT(*) as total,
                COUNT(CASE 
                    WHEN prompt LIKE '%–≤ %' OR prompt LIKE '%–Ω–∞ %' 
                    OR prompt LIKE '%–ø–æ–¥ %' OR prompt LIKE '% in %'
                    OR prompt LIKE '% on %' OR prompt LIKE '% at %'
                    THEN 1 
                END) as possibly_with_location
            FROM stickers
            WHERE is_deleted = 0
        """)
        total, with_location = await cursor.fetchone()

        if total > 0:
            location_percent = (with_location / total * 100) if with_location else 0
            print(f"\n  üìù –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–æ–≤:")
            print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–æ–≤: {total}")
            print(f"  ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ —Å –ª–æ–∫–∞—Ü–∏–µ–π: {with_location} ({location_percent:.1f}%)")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∏–ª—è–º
        cursor = await db.execute("""
            SELECT style, COUNT(*) as count, AVG(rating) as avg_rating
            FROM stickers
            WHERE is_deleted = 0
            GROUP BY style
            ORDER BY count DESC
            LIMIT 5
        """)

        styles = await cursor.fetchall()
        if styles:
            print(f"\n  üé® –¢–æ–ø —Å—Ç–∏–ª–µ–π:")
            for style, count, rating in styles:
                rating_str = f"{rating:.1f}" if rating else "N/A"
                print(f"  ‚Ä¢ {style}: {count} —Å—Ç–∏–∫–µ—Ä–æ–≤ (—Ä–µ–π—Ç–∏–Ω–≥: {rating_str})")

        print("\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüöÄ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("  ‚Ä¢ AI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–µ–Ω –ª–∏ —Ñ–æ–Ω")
        print("  ‚Ä¢ '–∫–æ—Ç' ‚Üí –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ–Ω")
        print("  ‚Ä¢ '–∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ' ‚Üí –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ñ–æ–Ω")
        print("  ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        print("  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —Ñ–æ–Ω–æ–≤")
        print("\nüí° –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–¥ –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π!")


if __name__ == "__main__":
    asyncio.run(migrate_smart_backgrounds())