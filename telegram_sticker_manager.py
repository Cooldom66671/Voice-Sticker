import io
import asyncio
from typing import Optional, Tuple, List
from PIL import Image
from aiogram import Bot
from aiogram.types import InputSticker, BufferedInputFile
from aiogram.exceptions import TelegramBadRequest

from logger import logger
from config import BOT_USERNAME, MAX_STICKERS_PER_PACK, MAX_PACKS_PER_USER
import db_manager

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∏–∫–µ—Ä–∞
STICKER_FORMAT = "static"


class TelegramStickerManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram —Å—Ç–∏–∫–µ—Ä–∞–º–∏"""

    def __init__(self):
        self.bot_username = BOT_USERNAME

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
        self.translit_dict = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd',
            '–µ': 'e', '—ë': 'e', '–∂': 'zh', '–∑': 'z', '–∏': 'i',
            '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n',
            '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't',
            '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch',
            '—à': 'sh', '—â': 'sch', '—ä': '', '—ã': 'y', '—å': '',
            '—ç': 'e', '—é': 'yu', '—è': 'ya'
        }

    def _translit_name(self, name: str) -> str:
        """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–º–µ–Ω–∏ –ø–∞–∫–∞"""
        result = ''
        for char in name.lower():
            result += self.translit_dict.get(char, char)
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        result = ''.join(c for c in result if c.isalnum() or c == '_')
        return result[:32]  # –ú–∞–∫—Å–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞

    def _get_pack_name(self, user_id: int, pack_number: int = 1, user_name: Optional[str] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_name and pack_number == 1:
            # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–∞–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            name_translit = self._translit_name(user_name)
            return f"{name_translit}_stickers_by_{self.bot_username}"
        else:
            # –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞–∫–æ–≤ –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏
            return f"pack{pack_number}_{user_id}_by_{self.bot_username}"

    def _get_pack_title(self, user_name: str, pack_number: int = 1) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞"""
        if pack_number > 1:
            return f"{user_name}'s stickers vol.{pack_number}"
        return f"{user_name}'s stickers"

    def _get_possible_pack_names(self, user_id: int, user_name: str) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–º–µ–Ω –ø–∞–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        names = []

        # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
        name_translit = self._translit_name(user_name)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        names.append(f"{name_translit}_stickers_by_{self.bot_username}")
        names.append(f"{name_translit}stickers_by_{self.bot_username}")

        # –í–∞—Ä–∏–∞–Ω—Ç—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏
        for i in range(1, 11):
            names.append(f"pack{i}_{user_id}_by_{self.bot_username}")
            if i > 1:
                names.append(f"{name_translit}_stickers{i}_by_{self.bot_username}")
                names.append(f"{name_translit}stickers{i}_by_{self.bot_username}")

        return names

    async def prepare_sticker_file(self, image_bytes: bytes) -> bytes:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Telegram.
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ WebP –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å prepare_sticker_for_telegram –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            try:
                # Assuming prepare_sticker_for_telegram is defined elsewhere and handles initial preparation
                # This line is kept from the original request, but prepare_sticker_for_telegram is not provided in the context.
                # If it's a new function, it needs to be imported or defined.
                # image_bytes = await prepare_sticker_for_telegram(image_bytes)
                pass  # Keeping 'pass' as a placeholder since `prepare_sticker_for_telegram` is undefined.
            except:
                pass

            img = Image.open(io.BytesIO(image_bytes))

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA
            if img.mode != 'RGBA':
                img = img.convert('RGBA')

            # –¢–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä 512x512
            if img.size != (512, 512):
                img = img.resize((512, 512), Image.Resampling.LANCZOS)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WebP (Telegram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å WebP)
            output = io.BytesIO()
            img.save(output, 'WEBP', quality=99, method=6)
            output.seek(0)

            result = output.read()
            logger.info(f"Prepared sticker for Telegram: {len(result)} bytes (WebP format)")
            return result

        except Exception as e:
            logger.error(f"Error preparing sticker: {e}")
            return image_bytes

    async def create_sticker_pack(
            self,
            bot: Bot,
            user_id: int,
            user_name: str,
            first_sticker_bytes: bytes,
            emoji: str = "üé®",
            pack_name: Optional[str] = None,
            pack_number: int = 1
    ) -> Tuple[bool, str, Optional[str]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not pack_name:
            pack_name = self._get_pack_name(user_id, pack_number, user_name)
        pack_title = self._get_pack_title(user_name, pack_number)
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–∫–µ—Ä –≤ WebP —Ñ–æ—Ä–º–∞—Ç
            prepared_bytes = await self.prepare_sticker_file(first_sticker_bytes)

            # –°–æ–∑–¥–∞–µ–º BufferedInputFile
            sticker_file = BufferedInputFile(
                file=prepared_bytes,
                filename="sticker.webp"
            )

            # –°–æ–∑–¥–∞–µ–º InputSticker
            sticker = InputSticker(
                sticker=sticker_file,
                emoji_list=[emoji],
                format="static"
            )

            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫
            result = await bot.create_new_sticker_set(
                user_id=user_id,
                name=pack_name,
                title=pack_title,
                stickers=[sticker],
                sticker_format="static"  # –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞
            )

            if result:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
                await asyncio.sleep(1)
                try:
                    created_set = await bot.get_sticker_set(pack_name)
                    if created_set and len(created_set.stickers) > 0:
                        logger.info(f"Successfully created pack {pack_name} with {len(created_set.stickers)} stickers")
                        return True, pack_name, None
                except Exception as e:
                    logger.error(f"Error verifying created sticker pack: {e}")  # Log error for verification failure
                    pass

                return False, pack_name, "Failed to create sticker pack"

        except TelegramBadRequest as e:
            error_msg = str(e)
            logger.error(f"Telegram error creating pack: {error_msg}")

            if "STICKERSET_INVALID" in error_msg:
                return False, pack_name, "pack_exists"

            return False, pack_name, error_msg

        except Exception as e:
            logger.error(f"Error creating sticker pack: {e}")
            return False, pack_name, str(e)

    async def add_sticker_to_pack(
            self,
            bot: Bot,
            user_id: int,
            pack_name: str,
            sticker_bytes: bytes,
            emoji: str = "üé®"
    ) -> Tuple[bool, str]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫

        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –µ—Å—Ç—å)
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–∫
            try:
                existing_pack = await bot.get_sticker_set(pack_name)
                logger.info(f"Pack {pack_name} has {len(existing_pack.stickers)} stickers before adding")
            except Exception as e:
                if "STICKERSET_INVALID" in str(e):
                    logger.warning(f"Pack {pack_name} is invalid, will need to create new one")
                    return False, "STICKERSET_INVALID"
                else:
                    logger.error(f"Error checking pack {pack_name}: {e}")
                    return False, str(e)

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–∫–µ—Ä
            sticker_file = await self.prepare_sticker_file(sticker_bytes)

            # –°–æ–∑–¥–∞–µ–º InputSticker
            input_sticker = InputSticker(
                sticker=BufferedInputFile(
                    file=sticker_file,
                    filename="sticker.png"
                ),
                emoji_list=[emoji],
                format="static"
            )

            # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä
            result = await bot.add_sticker_to_set(
                user_id=user_id,
                name=pack_name,
                sticker=input_sticker
            )

            if result:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏–∫–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                await asyncio.sleep(2)
                updated_pack = await bot.get_sticker_set(pack_name)
                logger.info(
                    f"Successfully added sticker to pack {pack_name}. Now has {len(updated_pack.stickers)} stickers")
                return True, ""
            else:
                logger.error(f"Failed to add sticker to pack {pack_name}")
                return False, "Failed to add sticker"

        except Exception as e:
            error_str = str(e)
            logger.error(f"Telegram error adding sticker: {e}")

            # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è STICKERSET_INVALID
            if "STICKERSET_INVALID" in error_str:
                return False, "STICKERSET_INVALID"
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–∫–∞
            elif "STICKERS_TOO_MANY" in error_str or "STICKERS_TOO_MUCH" in error_str:
                return False, "pack_full"
            else:
                return False, error_str

    async def get_or_create_user_pack(
            self,
            bot: Bot,
            user_id: int,
            user_name: str,
            sticker_bytes: bytes,
            emoji: str = "üé®"
    ) -> Tuple[bool, str, Optional[str]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–æ–≤

        Returns:
            Tuple[bool, str, Optional[str]]: (—É—Å–ø–µ—Ö, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–∞, –æ—à–∏–±–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å)
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–∏ –∏–∑ –ë–î
        existing_packs = await db_manager.get_user_packs(user_id)

        # –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–∏
        for pack in existing_packs:
            pack_name = pack['pack_name']
            logger.info(f"Trying to add to existing pack: {pack_name}")

            success, error = await self.add_sticker_to_pack(
                bot, user_id, pack_name, sticker_bytes, emoji
            )

            if success:
                logger.info(f"Added sticker to existing pack: {pack_name}")
                return True, pack_name, None

            elif error == "STICKERSET_INVALID":
                # –ü–∞–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - —É–¥–∞–ª—è–µ–º –∏–∑ –ë–î
                logger.warning(f"Pack {pack_name} is invalid, removing from DB")
                await db_manager.execute(
                    "DELETE FROM user_sticker_packs WHERE user_id = ? AND pack_name = ?",
                    (user_id, pack_name)
                )
                continue

            elif error == "pack_full":
                logger.info(f"Pack {pack_name} is full, trying next pack")
                continue

        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        if len(existing_packs) >= MAX_PACKS_PER_USER:
            logger.error(f"User {user_id} has reached max packs limit")
            return False, "", "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤ (10)"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∞–∫–∞
        pack_number = len(existing_packs) + 1
        new_pack_name = self._get_pack_name(user_id, pack_number, user_name if pack_number == 1 else None)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∞–∫
        success, pack_name, error = await self.create_sticker_pack(
            bot, user_id, user_name, sticker_bytes, emoji, new_pack_name, pack_number
        )

        if success:
            logger.info(f"Created new pack: {new_pack_name}")
            return True, pack_name, None
        else:
            return False, "", error or "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫"

    async def cleanup_invalid_packs(self, bot: Bot, user_id: int) -> int:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–∏ –∏–∑ –ë–î

        Returns:
            int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–æ–≤
        """
        existing_packs = await db_manager.get_user_packs(user_id)
        removed_count = 0

        for pack in existing_packs:
            pack_name = pack['pack_name']
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ
                await bot.get_sticker_set(pack_name)
                logger.info(f"Pack {pack_name} is valid")
            except Exception as e:
                if "STICKERSET_INVALID" in str(e):
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–∫ –∏–∑ –ë–î
                    logger.warning(f"Removing invalid pack {pack_name} from DB")
                    await db_manager.execute(
                        "DELETE FROM user_sticker_packs WHERE user_id = ? AND pack_name = ?",
                        (user_id, pack_name)
                    )
                    removed_count += 1
                else:
                    logger.error(f"Error checking pack {pack_name}: {e}")

        return removed_count

    def get_pack_link(self, pack_name: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫"""
        return f"https://t.me/addstickers/{pack_name}"


# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
sticker_manager = TelegramStickerManager()

__all__ = ["sticker_manager", "TelegramStickerManager"]