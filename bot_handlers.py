"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ VoiceSticker
–í–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é, —Å–∏—Å—Ç–µ–º–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
"""
import os
import asyncio
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict
import json

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton,
    InlineKeyboardMarkup, InputFile, FSInputFile,
    ReplyKeyboardRemove
)
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder

from logger import logger, log_user_action, log_error
from config import (
    MESSAGES, AVAILABLE_STYLES, BACKGROUND_STYLES,
    STORAGE_DIR, ADMIN_IDS, RATE_LIMIT_MESSAGES_PER_MINUTE
)
from db_manager import db_manager
from image_generation_service import image_service
from stt_service import stt_service
from sticker_utils import process_sticker


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class StickerGeneration(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞"""
    waiting_for_prompt = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞/–≥–æ–ª–æ—Å–∞
    waiting_for_style = State()  # –í—ã–±–æ—Ä —Å—Ç–∏–ª—è
    waiting_for_background = State()  # –í—ã–±–æ—Ä —Ñ–æ–Ω–∞
    processing = State()  # –û–±—Ä–∞–±–æ—Ç–∫–∞
    waiting_for_feedback = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
    waiting_for_feedback_comment = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
generation_cache: Dict[int, Dict] = {}


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def create_style_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    buttons = []
    styles = [
        ("üé® Cartoon", "cartoon"),
        ("üé≠ Anime", "anime"),
        ("üì∏ Realistic", "realistic"),
        ("‚ö° –ú–∏–Ω–∏–º–∞–ª–∏–∑–º", "minimalist"),
        ("üéÆ –ü–∏–∫—Å–µ–ª—å –∞—Ä—Ç", "pixel"),
        ("üñåÔ∏è –ê–∫–≤–∞—Ä–µ–ª—å", "watercolor"),
        ("‚úèÔ∏è –ù–∞–±—Ä–æ—Å–æ–∫", "sketch"),
    ]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(styles), 2):
        row = []
        for j in range(2):
            if i + j < len(styles):
                name, value = styles[i + j]
                row.append(InlineKeyboardButton(
                    text=name,
                    callback_data=f"style:{value}"
                ))
        buttons.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_background_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ–Ω–∞"""
    buttons = []
    backgrounds = [
        ("ü™ü –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π", "transparent"),
        ("‚¨ú –ë–µ–ª—ã–π", "white"),
        ("üåà –ì—Ä–∞–¥–∏–µ–Ω—Ç", "gradient"),
        ("‚≠ï –ö—Ä—É–≥–ª—ã–π", "circle"),
        ("üî≤ –ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π", "rounded"),
    ]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(backgrounds), 2):
        row = []
        for j in range(2):
            if i + j < len(backgrounds):
                name, value = backgrounds[i + j]
                row.append(InlineKeyboardButton(
                    text=name,
                    callback_data=f"bg:{value}"
                ))
        buttons.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∏–ª—è–º", callback_data="back_to_styles")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_feedback_keyboard(sticker_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ"""
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    for i in range(1, 6):
        builder.button(text=f"{'‚≠ê' * i}", callback_data=f"rate:{sticker_id}:{i}")

    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    builder.adjust(5)

    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    builder.button(text="üîÑ –°–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"retry:{sticker_id}")
    builder.button(text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment:{sticker_id}")
    builder.button(text="‚ûï –ù–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä", callback_data="back_to_menu")

    # –†–∞–∑–º–µ—â–∞–µ–º: 5 –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, 3 –≤–æ –≤—Ç–æ—Ä–æ–π
    builder.adjust(5, 3)

    return builder.as_markup()


def create_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()

    # –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    builder.button(text="üé® –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä", callback_data="create_sticker")
    builder.adjust(1)  # –û–¥–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ

    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    builder.button(text="üñº –ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã", callback_data="my_stickers")
    builder.button(text="üìù –ü—Ä–∏–º–µ—Ä—ã", callback_data="show_examples")
    builder.button(text="üé® –°—Ç–∏–ª–∏", callback_data="show_styles")
    builder.button(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    builder.button(text="üí° –°–æ–≤–µ—Ç—ã", callback_data="tips")

    # –†–∞–∑–º–µ—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
    builder.adjust(1, 2, 2, 2)

    return builder.as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await db_manager.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        language_code=user.language_code
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user.id, "start_command")

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_text = f"""üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>

üé® –Ø - VoiceSticker Bot! –°–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ –≤–∞—à–∏—Ö –∏–¥–µ–π!

<b>üéØ –ß—Ç–æ –Ω–æ–≤–æ–≥–æ:</b>
‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –£–¥–æ–±–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è

<b>üöÄ –ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await message.answer(
        welcome_text,
        reply_markup=create_main_menu_keyboard(),
        parse_mode=ParseMode.HTML
    )


@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    log_user_action(message.from_user.id, "help_command")

    help_text = """üìö <b>–ü–æ–º–æ—â—å VoiceSticker Bot</b>

<b>üéØ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ç–æ—á–Ω—ã–π —Å—Ç–∏–∫–µ—Ä:</b>
‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç —á–µ—Ç–∫–æ
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏: —Ü–≤–µ—Ç, —ç–º–æ—Ü–∏–∏, –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏

<b>‚úÖ –•–æ—Ä–æ—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ "–ö—Ä–∞—Å–Ω—ã–π –¥—Ä–∞–∫–æ–Ω –¥—ã—à–∏—Ç –æ–≥–Ω—ë–º"
‚Ä¢ "–ì—Ä—É—Å—Ç–Ω—ã–π –∫–æ—Ç–∏–∫ –ø–æ–¥ –¥–æ–∂–¥—ë–º"
‚Ä¢ "–í–µ—Å–µ–ª—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Å –∫–æ—Ñ–µ"

<b>‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:</b>
‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π
‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤
‚Ä¢ –°–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω

<b>üé® –°—Ç–∏–ª–∏:</b>
‚Ä¢ <b>Cartoon</b> - —è—Ä–∫–∏–π –º—É–ª—å—Ç—è—à–Ω—ã–π
‚Ä¢ <b>Anime</b> - —è–ø–æ–Ω—Å–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
‚Ä¢ <b>Realistic</b> - —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π
‚Ä¢ <b>Minimalist</b> - –ø—Ä–æ—Å—Ç–æ–π –∏ —á–∏—Å—Ç—ã–π
‚Ä¢ <b>Pixel</b> - –ø–∏–∫—Å–µ–ª—å–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞
‚Ä¢ <b>Watercolor</b> - –∞–∫–≤–∞—Ä–µ–ª—å
‚Ä¢ <b>Sketch</b> - –Ω–∞–±—Ä–æ—Å–æ–∫

<b>‚≠ê –û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!</b>
–≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã."""

    await message.answer(
        help_text,
        reply_markup=create_main_menu_keyboard(),
        parse_mode=ParseMode.HTML
    )


@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    user_id = message.from_user.id
    log_user_action(user_id, "stats_command")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await db_manager.get_user_stats(user_id)

    if not stats:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ü–µ–Ω–∫–∞–º
    ratings_stats = await db_manager.fetchone(
        """
        SELECT 
            AVG(rating) as avg_rating,
            COUNT(CASE WHEN rating >= 4 THEN 1 END) as good_ratings,
            COUNT(CASE WHEN rating IS NOT NULL THEN 1 END) as total_rated
        FROM stickers 
        WHERE user_id = ? AND is_deleted = 0
        """,
        (user_id,)
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    registered = datetime.fromisoformat(stats['registered_at']).strftime("%d.%m.%Y")

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    total_rated = ratings_stats['total_rated'] or 0
    good_ratings = ratings_stats['good_ratings'] or 0
    avg_rating = ratings_stats['avg_rating'] or 0.0
    success_percent = (good_ratings / total_rated * 100) if total_rated > 0 else 0

    text = f"""üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

üë§ –ò–º—è: {stats['first_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registered}

üé® –°–æ–∑–¥–∞–Ω–æ —Å—Ç–∏–∫–µ—Ä–æ–≤: {stats['total_stickers']}
üé§ –ì–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_voice_messages']}
üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_text_messages']}

<b>‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f}/5.0
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {good_ratings}/{total_rated} ({success_percent:.0f}%)
"""

    await message.answer(
        text,
        reply_markup=create_main_menu_keyboard(),
        parse_mode=ParseMode.HTML
    )


@dp.message(Command("mystickers"))
async def cmd_mystickers(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mystickers"""
    await show_user_stickers(message.from_user.id, message)


@dp.message(Command("tips"))
async def cmd_tips(message: Message):
    """–°–æ–≤–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    tips_text = """üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤:</b>

<b>1. –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã:</b>
‚ùå "–∫–æ—Ç"
‚úÖ "—Ä—ã–∂–∏–π –∫–æ—Ç —Å –∑–µ–ª—ë–Ω—ã–º–∏ –≥–ª–∞–∑–∞–º–∏"

<b>2. –û–ø–∏—à–∏—Ç–µ —ç–º–æ—Ü–∏–∏:</b>
‚ùå "—Å–æ–±–∞–∫–∞"
‚úÖ "—Ä–∞–¥–æ—Å—Ç–Ω–∞—è —Å–æ–±–∞–∫–∞ –≤–∏–ª—è–µ—Ç —Ö–≤–æ—Å—Ç–æ–º"

<b>3. –î–æ–±–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
‚ùå "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"
‚úÖ "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø–µ—á–∞—Ç–∞–µ—Ç –∫–æ–¥ —Å –∫–æ—Ñ–µ"

<b>4. –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å –æ–¥–µ–∂–¥—ã/–¥–µ—Ç–∞–ª–∏:</b>
‚ùå "–¥–µ–≤—É—à–∫–∞"
‚úÖ "–¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ —Å —Ü–≤–µ—Ç–∞–º–∏"

<b>5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–≤–µ—Ç–∞:</b>
‚ùå "–¥—Ä–∞–∫–æ–Ω"
‚úÖ "—Å–∏–Ω–∏–π –¥—Ä–∞–∫–æ–Ω —Å –∑–æ–ª–æ—Ç—ã–º–∏ –∫—Ä—ã–ª—å—è–º–∏"

<b>üéØ –°–µ–∫—Ä–µ—Ç:</b> –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —á–µ–ª–æ–≤–µ–∫—É –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É!"""

    await message.answer(
        tips_text,
        reply_markup=create_main_menu_keyboard(),
        parse_mode=ParseMode.HTML
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data == "create_sticker")
async def cb_create_sticker(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞"""
    await callback.answer()

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    await state.set_state(StickerGeneration.waiting_for_prompt)

    await callback.message.edit_text(
        "üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:\n"
        "‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ üí¨ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π:</b>\n"
        "‚Ä¢ <i>¬´–í–µ—Å–µ–ª—ã–π –∫–æ—Ç–∏–∫ —Å —Ä–∞–¥—É–≥–æ–π¬ª</i>\n"
        "‚Ä¢ <i>¬´–ì—Ä—É—Å—Ç–Ω—ã–π —Ä–æ–±–æ—Ç –ø–æ–¥ –¥–æ–∂–¥–µ–º¬ª</i>\n"
        "‚Ä¢ <i>¬´–ó–ª–æ–π –±–æ—Å—Å –≤ –∫–æ—Å—Ç—é–º–µ –∫—Ä–∏—á–∏—Ç¬ª</i>",
        parse_mode=ParseMode.HTML
    )


@dp.callback_query(F.data == "back_to_menu")
async def cb_back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.answer(
            "üé® <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞:",
            reply_markup=create_main_menu_keyboard(),
            parse_mode=ParseMode.HTML
        )

        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except:
            pass

        await callback.answer("–ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä! üé®")

    except Exception as e:
        logger.error(f"Error in cb_back_to_menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@dp.callback_query(F.data == "back_to_styles")
async def cb_back_to_styles(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª–µ–π"""
    await callback.answer()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
    await state.set_state(StickerGeneration.waiting_for_style)

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    data = await state.get_data()
    prompt = data.get("prompt", "")

    await callback.message.edit_text(
        f"üìù –í–∞—à –∑–∞–ø—Ä–æ—Å: <i>{prompt}</i>\n\n"
        f"üé® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Å—Ç–∏–∫–µ—Ä–∞:</b>",
        reply_markup=create_style_keyboard(),
        parse_mode=ParseMode.HTML
    )


@dp.callback_query(F.data == "show_examples")
async def cb_show_examples(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    examples_text = """üìù <b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤:</b>

<b>–≠–º–æ—Ü–∏–∏:</b>
‚Ä¢ "–†–∞–¥–æ—Å—Ç–Ω—ã–π –∫–æ—Ç–∏–∫ —Å –ø–æ–¥–∞—Ä–∫–æ–º"
‚Ä¢ "–ì—Ä—É—Å—Ç–Ω—ã–π –ø—ë—Å–∏–∫ –ø–æ–¥ –¥–æ–∂–¥—ë–º"
‚Ä¢ "–£–¥–∏–≤–ª—ë–Ω–Ω–∞—è —Å–æ–≤–∞ –≤ –æ—á–∫–∞—Ö"

<b>–î–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º"
‚Ä¢ "–î–µ–≤—É—à–∫–∞ –ø—å—ë—Ç –∫–æ—Ñ–µ"
‚Ä¢ "–ú–∞–ª—å—á–∏–∫ –∏–≥—Ä–∞–µ—Ç –≤ —Ñ—É—Ç–±–æ–ª"

<b>–ü—Ä–∞–∑–¥–Ω–∏–∫–∏:</b>
‚Ä¢ "–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è —Å —Ç–æ—Ä—Ç–æ–º"
‚Ä¢ "–° –Ω–æ–≤—ã–º –≥–æ–¥–æ–º –∏ —ë–ª–∫–æ–π"
‚Ä¢ "–í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ —Å —Å–µ—Ä–¥–µ—á–∫–∞–º–∏"

<b>–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ:</b>
‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ç –≤ —Å–∫–∞—Ñ–∞–Ω–¥—Ä–µ"
‚Ä¢ "–ï–¥–∏–Ω–æ—Ä–æ–≥ –Ω–∞ —Ä–∞–¥—É–≥–µ"
‚Ä¢ "–†–æ–±–æ—Ç —Å —Ü–≤–µ—Ç–∞–º–∏"

üí° <i>–ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</i>"""

    builder = InlineKeyboardBuilder()
    builder.button(text="üé® –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä", callback_data="create_sticker")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(1)

    await callback.message.edit_text(
        examples_text,
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@dp.callback_query(F.data == "show_styles")
async def cb_show_styles(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏"""
    styles_text = """üé® <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤:</b>

üåü <b>Cartoon</b> - –ú—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å
üé≠ <b>Anime</b> - –ê–Ω–∏–º–µ —Å—Ç–∏–ª—å
üì∏ <b>Realistic</b> - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π
‚ö° <b>Minimalist</b> - –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π
üéÆ <b>Pixel</b> - –ü–∏–∫—Å–µ–ª—å –∞—Ä—Ç
üñåÔ∏è <b>Watercolor</b> - –ê–∫–≤–∞—Ä–µ–ª—å–Ω—ã–π
‚úèÔ∏è <b>Sketch</b> - –ö–∞—Ä–∞–Ω–¥–∞—à–Ω—ã–π –Ω–∞–±—Ä–æ—Å–æ–∫

üñº <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ–Ω—ã:</b>
‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π
‚Ä¢ –ë–µ–ª—ã–π
‚Ä¢ –ì—Ä–∞–¥–∏–µ–Ω—Ç
‚Ä¢ –ö—Ä—É–≥–ª—ã–π
‚Ä¢ –ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π

üí° <i>–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏!</i>"""

    builder = InlineKeyboardBuilder()
    builder.button(text="üé® –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä", callback_data="create_sticker")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(1)

    await callback.message.edit_text(
        styles_text,
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@dp.callback_query(F.data == "tips")
async def cb_tips(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–≤–µ—Ç—ã —á–µ—Ä–µ–∑ callback"""
    await callback.answer()
    await cmd_tips(callback.message)


@dp.callback_query(F.data == "help")
async def cb_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å —á–µ—Ä–µ–∑ callback"""
    await callback.answer()
    await cmd_help(callback.message)


@dp.callback_query(F.data == "stats")
async def cb_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ callback"""
    await callback.answer()
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ user_id
    class FakeMessage:
        def __init__(self, from_user):
            self.from_user = from_user

    fake_message = FakeMessage(callback.from_user)
    await cmd_stats(fake_message)


@dp.callback_query(F.data == "my_stickers")
async def cb_my_stickers(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∏–∫–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ callback"""
    await callback.answer()
    await show_user_stickers(callback.from_user.id, callback.message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
@dp.callback_query(F.data.startswith("style:"))
async def cb_select_style(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    await callback.answer()

    style = callback.data.split(":")[1]
    await state.update_data(style=style)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ñ–æ–Ω–∞
    await state.set_state(StickerGeneration.waiting_for_background)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è
    style_descriptions = {
        "cartoon": "—è—Ä–∫–∏–π –∏ –≤–µ—Å–µ–ª—ã–π –º—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å",
        "anime": "—è–ø–æ–Ω—Å–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Å –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≥–ª–∞–∑–∞–º–∏",
        "realistic": "—Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        "minimalist": "–ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∏–ª—å —Å –º–∏–Ω–∏–º—É–º–æ–º –¥–µ—Ç–∞–ª–µ–π",
        "pixel": "—Ä–µ—Ç—Ä–æ –ø–∏–∫—Å–µ–ª—å–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞",
        "watercolor": "–Ω–µ–∂–Ω–∞—è –∞–∫–≤–∞—Ä–µ–ª—å–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å",
        "sketch": "–∫–∞—Ä–∞–Ω–¥–∞—à–Ω—ã–π –Ω–∞–±—Ä–æ—Å–æ–∫"
    }

    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: <b>{style_descriptions.get(style, style)}</b>\n\n"
        "üñº <b>–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ–Ω –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞:</b>",
        reply_markup=create_background_keyboard(),
        parse_mode=ParseMode.HTML
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–æ–Ω–∞
@dp.callback_query(F.data.startswith("bg:"))
async def cb_select_background(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ–Ω–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∏–∫–µ—Ä–∞"""
    await callback.answer()

    background = callback.data.split(":")[1]
    await state.update_data(background=background)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    prompt = data.get("prompt", "")
    style = data.get("style", "default")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await state.set_state(StickerGeneration.processing)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
    await callback.message.edit_text(
        f"‚è≥ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à —Å—Ç–∏–∫–µ—Ä...</b>\n\n"
        f"üìù <i>{prompt}</i>\n"
        f"üé® –°—Ç–∏–ª—å: {style}\n"
        f"üñº –§–æ–Ω: {background}\n\n"
        f"<i>–≠—Ç–æ –∑–∞–π–º—ë—Ç 15-20 —Å–µ–∫—É–Ω–¥...</i>",
        parse_mode=ParseMode.HTML
    )

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
        image_data, metadata = await image_service.generate_sticker_with_validation(
            prompt,
            style,
            user_id=callback.from_user.id
        )

        if not image_data:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∏–∫–µ—Ä
        sticker_bytes = await process_sticker(image_data, background)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"sticker_{callback.from_user.id}_{timestamp}.png"
        file_path = STORAGE_DIR / filename

        with open(file_path, "wb") as f:
            f.write(sticker_bytes)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        sticker_id = await db_manager.save_sticker(
            user_id=callback.from_user.id,
            prompt=prompt,
            style=style,
            background=background,
            file_path=str(file_path),
            file_id=None,  # –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            metadata=json.dumps(metadata) if metadata else None
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        generation_cache[callback.from_user.id] = {
            'sticker_id': sticker_id,
            'prompt': prompt,
            'style': style,
            'metadata': metadata
        }

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await callback.message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ü–µ–Ω–∫–∏
        sticker_file = FSInputFile(file_path)
        sent_message = await bot.send_document(
            chat_id=callback.from_user.id,
            document=sticker_file,
            caption=(
                f"‚ú® <b>–í–∞—à —Å—Ç–∏–∫–µ—Ä –≥–æ—Ç–æ–≤!</b>\n\n"
                f"üìù <i>{prompt}</i>\n"
                f"üé® –°—Ç–∏–ª—å: {style}\n\n"
                f"<b>–û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
                f"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã!"
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=create_feedback_keyboard(sticker_id)
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º file_id –≤ –ë–î
        if sent_message.document:
            await db_manager.execute(
                "UPDATE stickers SET file_id = ? WHERE id = ?",
                (sent_message.document.file_id, sticker_id)
            )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        await state.set_state(StickerGeneration.waiting_for_feedback)

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
        log_user_action(callback.from_user.id, "sticker_created", {
            "prompt": prompt,
            "style": style,
            "background": background
        })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞: {e}")
        log_error(e, {"user_id": callback.from_user.id})

        await callback.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å\n"
            "‚Ä¢ –ë—ã—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º\n\n"
            "–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_menu_keyboard(),
            parse_mode=ParseMode.HTML
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ü–µ–Ω–æ–∫
@dp.callback_query(F.data.startswith("rate:"))
async def cb_rate_sticker(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞"""
    parts = callback.data.split(":")
    sticker_id = int(parts[1])
    rating = int(parts[2])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –ë–î
    await db_manager.execute(
        "UPDATE stickers SET rating = ? WHERE id = ?",
        (rating, sticker_id)
    )

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ —Å–µ—Ä–≤–∏—Å
    user_cache = generation_cache.get(callback.from_user.id)
    if user_cache and user_cache['sticker_id'] == sticker_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if hasattr(image_service, 'record_feedback'):
            image_service.record_feedback(user_cache['metadata'], rating)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏
    rating_responses = {
        5: "üéâ –û—Ç–ª–∏—á–Ω–æ! –†–∞–¥, —á—Ç–æ —Å—Ç–∏–∫–µ—Ä –ø–æ–ª—É—á–∏–ª—Å—è –∏–¥–µ–∞–ª—å–Ω—ã–º!",
        4: "üòä –•–æ—Ä–æ—à–æ! –ë—É–¥—É —Å—Ç–∞—Ä–∞—Ç—å—Å—è –¥–µ–ª–∞—Ç—å –µ—â—ë –ª—É—á—à–µ!",
        3: "ü§î –ü–æ–Ω—è–ª, –±—É–¥—É —É–ª—É—á—à–∞—Ç—å—Å—è!",
        2: "üòï –ñ–∞–ª—å, —á—Ç–æ –Ω–µ –æ—á–µ–Ω—å –ø–æ–ª—É—á–∏–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.",
        1: "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ –Ω–µ –æ–ø—Ä–∞–≤–¥–∞–ª –æ–∂–∏–¥–∞–Ω–∏–π. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞?"
    }

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏
    builder = InlineKeyboardBuilder()

    if rating <= 3:
        builder.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"retry:{sticker_id}")

    builder.button(text="‚ûï –ù–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä", callback_data="back_to_menu")
    builder.button(text="üñº –ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã", callback_data="my_stickers")

    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏
    if rating <= 3:
        builder.adjust(1, 2)
    else:
        builder.adjust(2)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_caption(
        caption=(
            f"{callback.message.caption}\n\n"
            f"‚≠ê –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating}\n"
            f"{rating_responses[rating]}"
        ),
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏
    await state.clear()

    await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!")


# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ retry
@dp.callback_query(F.data.startswith("retry:"))
async def cb_retry_sticker(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∏–∫–µ—Ä–∞"""
    try:
        sticker_id = int(callback.data.split(":")[1])

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        sticker_data = await db_manager.fetchone(
            "SELECT prompt, style FROM stickers WHERE id = ?",
            (sticker_id,)
        )

        if sticker_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
            await state.update_data(
                prompt=sticker_data['prompt'],
                retry_from=sticker_id
            )

            await callback.message.answer(
                f"üîÑ <b>–°–æ–∑–¥–∞—é —Å—Ç–∏–∫–µ—Ä –∑–∞–Ω–æ–≤–æ</b>\n\n"
                f"–ó–∞–ø—Ä–æ—Å: <i>{sticker_data['prompt']}</i>\n\n"
                f"üí° <b>–°–æ–≤–µ—Ç:</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π!\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å (–ø—Ä–µ–¥—ã–¥—É—â–∏–π: {sticker_data['style']}):",
                reply_markup=create_style_keyboard(),
                parse_mode=ParseMode.HTML
            )

            await state.set_state(StickerGeneration.waiting_for_style)
            await callback.answer()
        else:
            await callback.answer("–°—Ç–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    except Exception as e:
        logger.error(f"Error in cb_retry_sticker: {e}")
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –ë–î
        await db_manager.log_error(
            error_type="callback_error",
            error_message=str(e),
            user_id=callback.from_user.id,
            context=f"retry_sticker:{sticker_id}"
        )
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)


@dp.callback_query(F.data.startswith("comment:"))
async def cb_add_comment(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Å—Ç–∏–∫–µ—Ä—É"""
    sticker_id = int(callback.data.split(":")[1])

    await state.update_data(comment_sticker_id=sticker_id)
    await state.set_state(StickerGeneration.waiting_for_feedback_comment)

    await callback.message.answer(
        "üí¨ <b>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?</b>\n\n"
        "–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã.\n\n"
        "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –æ—Ç–∑—ã–≤–æ–º:</i>",
        parse_mode=ParseMode.HTML
    )

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(StateFilter(StickerGeneration.waiting_for_prompt), F.text)
async def handle_text_prompt(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    prompt = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if len(prompt) < 3:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return

    if len(prompt) > 200:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç
    await state.update_data(prompt=prompt)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await db_manager.update_message_stats(message.from_user.id, is_voice=False)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è
    await state.set_state(StickerGeneration.waiting_for_style)

    await message.answer(
        f"üìù –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å: <i>{prompt}</i>\n\n"
        f"üé® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Å—Ç–∏–∫–µ—Ä–∞:</b>",
        reply_markup=create_style_keyboard(),
        parse_mode=ParseMode.HTML
    )


@dp.message(StateFilter(StickerGeneration.waiting_for_prompt), F.voice)
async def handle_voice_prompt(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    voice = message.voice

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
    if voice.file_size > 20 * 1024 * 1024:
        await message.answer("‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º—É–º 20 –ú–ë.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏
    processing_msg = await message.answer("üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await bot.get_file(voice.file_id)
        file_path = STORAGE_DIR / f"voice_{message.from_user.id}_{voice.file_id}.ogg"

        await bot.download_file(file_info.file_path, file_path)

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
        result = await stt_service.transcribe_audio(str(file_path))

        if not result or not result.get("text"):
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        prompt = result["text"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç
        await state.update_data(prompt=prompt)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await db_manager.update_message_stats(message.from_user.id, is_voice=True)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏
        await processing_msg.delete()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è
        await message.answer(
            f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: <i>{prompt}</i>\n\n"
            f"üé® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Å—Ç–∏–∫–µ—Ä–∞:</b>",
            reply_markup=create_style_keyboard(),
            parse_mode=ParseMode.HTML
        )

        await state.set_state(StickerGeneration.waiting_for_style)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.unlink(file_path)
        except:
            pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await processing_msg.edit_text(MESSAGES["error"])


@dp.message(StateFilter(StickerGeneration.waiting_for_feedback_comment), F.text)
async def handle_feedback_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Å—Ç–∏–∫–µ—Ä—É"""
    comment = message.text.strip()
    data = await state.get_data()
    sticker_id = data.get('comment_sticker_id')

    if sticker_id:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        await db_manager.execute(
            "UPDATE stickers SET feedback_comment = ? WHERE id = ?",
            (comment, sticker_id)
        )

        await message.answer(
            "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!</b>\n\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —É–ª—É—á—à–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç–∏–∫–µ—Ä–æ–≤.",
            reply_markup=create_main_menu_keyboard(),
            parse_mode=ParseMode.HTML
        )

    await state.clear()


@dp.message(F.text)
async def handle_any_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä
    current_state = await state.get_state()

    if not current_state:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è
        await state.update_data(prompt=message.text.strip())
        await state.set_state(StickerGeneration.waiting_for_style)

        await message.answer(
            f"üí° –°–æ–∑–¥–∞—é —Å—Ç–∏–∫–µ—Ä –∏–∑ –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n<i>¬´{message.text}¬ª</i>\n\n"
            f"üé® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:</b>",
            reply_markup=create_style_keyboard(),
            parse_mode=ParseMode.HTML
        )


@dp.message(F.voice)
async def handle_any_voice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    current_state = await state.get_state()

    if not current_state:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ
        await state.set_state(StickerGeneration.waiting_for_prompt)
        await handle_voice_prompt(message, state, message.bot)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def show_user_stickers(user_id: int, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ü–µ–Ω–∫–∞–º–∏"""
    stickers = await db_manager.get_user_stickers(user_id, limit=10)

    if not stickers:
        await message.answer(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∏–∫–µ—Ä–æ–≤</b>\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å—Ç–∏–∫–µ—Ä –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
            reply_markup=create_main_menu_keyboard(),
            parse_mode=ParseMode.HTML
        )
        return

    text = "üñº <b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—ã:</b>\n\n"

    for i, sticker in enumerate(stickers, 1):
        created = datetime.fromisoformat(sticker['created_at']).strftime("%d.%m %H:%M")
        rating = sticker.get('rating', 0)
        rating_text = f" {'‚≠ê' * rating}" if rating else " (–±–µ–∑ –æ—Ü–µ–Ω–∫–∏)"

        text += f"{i}. {sticker['prompt'][:30]}...{rating_text} ({created})\n"

    text += "\nüí° <i>–û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —Å—Ç–∏–∫–µ—Ä—ã, —á—Ç–æ–±—ã —è –º–æ–≥ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏—Ö —Ç–æ—á–Ω–µ–µ!</i>"

    builder = InlineKeyboardBuilder()
    builder.button(text="üé® –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="create_sticker")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(1)

    await message.answer(
        text,
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.HTML
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    if message.from_user.id not in ADMIN_IDS:
        return

    stats = await db_manager.get_total_stats()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ü–µ–Ω–∫–∞–º
    ratings = await db_manager.fetchall(
        """
        SELECT 
            rating,
            COUNT(*) as count
        FROM stickers 
        WHERE rating IS NOT NULL 
        GROUP BY rating
        ORDER BY rating DESC
        """
    )

    ratings_text = "\n".join([f"{r['rating']}‚≠ê: {r['count']} —Å—Ç–∏–∫–µ—Ä–æ–≤" for r in ratings])

    text = f"""üë®‚Äçüíº <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>

üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
- –°—Ç–∏–∫–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {stats['total_stickers']}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {stats['active_users_24h']}
- –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats['average_rating']}/5.0

‚≠ê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:
{ratings_text}

üìà –ö–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É–ª—É—á—à–∞–µ—Ç—Å—è!
"""

    await message.answer(text, parse_mode=ParseMode.HTML)


@dp.message(Command("ab_stats"))
async def cmd_ab_stats(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_IDS:
        return

    from prompt_optimization import prompt_optimizer

    stats = prompt_optimizer.get_statistics()

    text = "üìä <b>A/B Testing Statistics</b>\n\n"

    # –¢–µ–∫—É—â–∏–π —á–µ–º–ø–∏–æ–Ω
    if stats["current_champion"]:
        text += f"üèÜ <b>Current Champion:</b> {stats['current_champion']}\n\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω–∞–º
    text += "<b>Template Performance:</b>\n"
    for tid, data in stats["templates"].items():
        status = "‚úÖ" if data["active"] else "‚ùå"
        text += (
            f"\n{status} <b>{data['name']}</b>\n"
            f"   ‚Ä¢ Uses: {data['uses']}\n"
            f"   ‚Ä¢ Success: {data['success_rate']}\n"
            f"   ‚Ä¢ Avg Rating: {data['avg_rating']}/5.0\n"
        )

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    if "recent_7_days" in stats:
        recent = stats["recent_7_days"]
        text += (
            f"\nüìÖ <b>Last 7 Days:</b>\n"
            f"‚Ä¢ Tests: {recent['total_tests']}\n"
            f"‚Ä¢ Avg Rating: {recent['avg_rating']:.2f}\n"
            f"‚Ä¢ Success Rate: {recent['success_rate']:.1%}"
        )

    await message.answer(text, parse_mode=ParseMode.HTML)


@dp.message(Command("export_best"))
async def cmd_export_best(message: Message):
    """–≠–∫—Å–ø–æ—Ä—Ç –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_IDS:
        return

    from prompt_optimization import prompt_optimizer

    best_practices = prompt_optimizer.export_best_practices()

    if not best_practices:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return

    text = "üåü <b>Best Practices Export</b>\n\n"

    for practice in best_practices[:3]:  # –¢–æ–ø-3
        text += (
            f"<b>{practice['template']}</b>\n"
            f"Success: {practice['success_rate']:.1%} | "
            f"Rating: {practice['avg_rating']:.2f}\n"
        )

        # –ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if practice['examples']:
            text += "Examples:\n"
            for ex in practice['examples'][:2]:
                text += f"  ‚Ä¢ \"{ex['request']}\" (‚≠ê{ex['rating']})\n"
        text += "\n"

    await message.answer(text, parse_mode=ParseMode.HTML)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    import json
    with open('best_practices_export.json', 'w', encoding='utf-8') as f:
        json.dump(best_practices, f, indent=2, ensure_ascii=False)

    await message.answer("üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ best_practices_export.json")


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
__all__ = ["dp"]